import React from 'react';
import PropTypes from 'prop-types';
import {
    createSsrJs
} from './layoutFixerEmbededJs';
export var LayoutFixer = function(props) {
    var _a;
    try {
        var existingLinkUrl = typeof window !== 'undefined' ?
            (((_a = window.document.getElementById('layout-fixer-style-' + props.id)) === null || _a === void 0 ? void 0 : _a.href) || '').replace(/^.*\/\/[^/]+/, '') :
            '';
        return (React.createElement("div", {
                id: 'layout-fixer-' + props.id + props.isPrerenderMode,
                key: 'layout-fixer-' + props.id + props.isPrerenderMode,
                style: {
                    display: 'none'
                }
            },
            props.isPrerenderMode &&
            React.createElement("link", {
                href: existingLinkUrl,
                rel: "stylesheet",
                id: 'layout-fixer-style-' + props.id
            }),
            React.createElement("script", {
                dangerouslySetInnerHTML: {
                    __html: "try {\n            window.requestAnimationFrame(function() {\n              setTimeout(() => {\n                ".concat(createSsrJs(props), "\n              }, 0);\n            });\n        } catch (e) {\n          console.warn('Cannot set layoutFixer css', e);\n        }"),
                }
            })));
    } catch (e) {
        return (React.createElement("div", {
            id: "layoutFixerErrors",
            style: {
                display: 'none'
            }
        }, e.toString()));
    }
};
LayoutFixer.defaultProps = {
    measureContainerId: ''
};
LayoutFixer.propTypes = {
    isPrerenderMode: PropTypes.bool,
    id: PropTypes.string,
    items: PropTypes.array,
    options: PropTypes.object,
    useNativeLayoutFixer: PropTypes.bool,
    containerPostProcess: PropTypes.shape({
        width: PropTypes.shape({
            percentage: PropTypes.number,
            addition: PropTypes.number,
        }),
        height: PropTypes.shape({
            percentage: PropTypes.number,
            addition: PropTypes.number,
        }),
        ios: PropTypes.shape({
            width: PropTypes.shape({
                percentage: PropTypes.number,
                addition: PropTypes.number,
            }),
            height: PropTypes.shape({
                percentage: PropTypes.number,
                addition: PropTypes.number,
            })
        })
    }),
    measureContainerId: PropTypes.string,
};
//# sourceMappingURL=layoutFixer.js.map